// Mocks generated by Mockito 5.4.6 from annotations
// in space_x_test_task/test/repository/launches_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:space_x_test_task/features/launches/data/response/launch_response.dart'
    as _i2;
import 'package:space_x_test_task/features/launches/data/response/rocket_response.dart'
    as _i3;
import 'package:space_x_test_task/features/launches/domain/repository/launches_repository.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeLaunchItem_0 extends _i1.SmartFake implements _i2.LaunchItem {
  _FakeLaunchItem_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRocketItem_1 extends _i1.SmartFake implements _i3.RocketItem {
  _FakeRocketItem_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRocket_2 extends _i1.SmartFake implements _i2.Rocket {
  _FakeRocket_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTelemetry_3 extends _i1.SmartFake implements _i2.Telemetry {
  _FakeTelemetry_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLaunchSite_4 extends _i1.SmartFake implements _i2.LaunchSite {
  _FakeLaunchSite_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLinks_5 extends _i1.SmartFake implements _i2.Links {
  _FakeLinks_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTimeline_6 extends _i1.SmartFake implements _i2.Timeline {
  _FakeTimeline_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$LaunchItemCopyWith_7<$Res> extends _i1.SmartFake
    implements _i2.$LaunchItemCopyWith<$Res> {
  _Fake$LaunchItemCopyWith_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$RocketItemCopyWith_8<$Res> extends _i1.SmartFake
    implements _i3.$RocketItemCopyWith<$Res> {
  _Fake$RocketItemCopyWith_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LaunchesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLaunchesRepository extends _i1.Mock
    implements _i4.LaunchesRepository {
  @override
  _i5.Future<List<_i2.LaunchItem>> getLaunches({
    required int? page,
    required int? pageSize,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getLaunches, [], {
              #page: page,
              #pageSize: pageSize,
            }),
            returnValue: _i5.Future<List<_i2.LaunchItem>>.value(
              <_i2.LaunchItem>[],
            ),
            returnValueForMissingStub: _i5.Future<List<_i2.LaunchItem>>.value(
              <_i2.LaunchItem>[],
            ),
          )
          as _i5.Future<List<_i2.LaunchItem>>);

  @override
  _i5.Future<_i2.LaunchItem> getLaunchById({required int? launchId}) =>
      (super.noSuchMethod(
            Invocation.method(#getLaunchById, [], {#launchId: launchId}),
            returnValue: _i5.Future<_i2.LaunchItem>.value(
              _FakeLaunchItem_0(
                this,
                Invocation.method(#getLaunchById, [], {#launchId: launchId}),
              ),
            ),
            returnValueForMissingStub: _i5.Future<_i2.LaunchItem>.value(
              _FakeLaunchItem_0(
                this,
                Invocation.method(#getLaunchById, [], {#launchId: launchId}),
              ),
            ),
          )
          as _i5.Future<_i2.LaunchItem>);

  @override
  _i5.Future<_i3.RocketItem> getRocketById({required String? rocketId}) =>
      (super.noSuchMethod(
            Invocation.method(#getRocketById, [], {#rocketId: rocketId}),
            returnValue: _i5.Future<_i3.RocketItem>.value(
              _FakeRocketItem_1(
                this,
                Invocation.method(#getRocketById, [], {#rocketId: rocketId}),
              ),
            ),
            returnValueForMissingStub: _i5.Future<_i3.RocketItem>.value(
              _FakeRocketItem_1(
                this,
                Invocation.method(#getRocketById, [], {#rocketId: rocketId}),
              ),
            ),
          )
          as _i5.Future<_i3.RocketItem>);
}

/// A class which mocks [LaunchItem].
///
/// See the documentation for Mockito's code generation for more information.
class MockLaunchItem extends _i1.Mock implements _i2.LaunchItem {
  @override
  int get flightNumber =>
      (super.noSuchMethod(
            Invocation.getter(#flightNumber),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  String get missionName =>
      (super.noSuchMethod(
            Invocation.getter(#missionName),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#missionName),
            ),
            returnValueForMissingStub: _i6.dummyValue<String>(
              this,
              Invocation.getter(#missionName),
            ),
          )
          as String);

  @override
  List<String> get missionId =>
      (super.noSuchMethod(
            Invocation.getter(#missionId),
            returnValue: <String>[],
            returnValueForMissingStub: <String>[],
          )
          as List<String>);

  @override
  String get launchYear =>
      (super.noSuchMethod(
            Invocation.getter(#launchYear),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#launchYear),
            ),
            returnValueForMissingStub: _i6.dummyValue<String>(
              this,
              Invocation.getter(#launchYear),
            ),
          )
          as String);

  @override
  int get launchDateUnix =>
      (super.noSuchMethod(
            Invocation.getter(#launchDateUnix),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  String get launchDateUtc =>
      (super.noSuchMethod(
            Invocation.getter(#launchDateUtc),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#launchDateUtc),
            ),
            returnValueForMissingStub: _i6.dummyValue<String>(
              this,
              Invocation.getter(#launchDateUtc),
            ),
          )
          as String);

  @override
  String get launchDateLocal =>
      (super.noSuchMethod(
            Invocation.getter(#launchDateLocal),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#launchDateLocal),
            ),
            returnValueForMissingStub: _i6.dummyValue<String>(
              this,
              Invocation.getter(#launchDateLocal),
            ),
          )
          as String);

  @override
  bool get isTentative =>
      (super.noSuchMethod(
            Invocation.getter(#isTentative),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String get tentativeMaxPrecision =>
      (super.noSuchMethod(
            Invocation.getter(#tentativeMaxPrecision),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#tentativeMaxPrecision),
            ),
            returnValueForMissingStub: _i6.dummyValue<String>(
              this,
              Invocation.getter(#tentativeMaxPrecision),
            ),
          )
          as String);

  @override
  bool get tbd =>
      (super.noSuchMethod(
            Invocation.getter(#tbd),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  int get launchWindow =>
      (super.noSuchMethod(
            Invocation.getter(#launchWindow),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  _i2.Rocket get rocket =>
      (super.noSuchMethod(
            Invocation.getter(#rocket),
            returnValue: _FakeRocket_2(this, Invocation.getter(#rocket)),
            returnValueForMissingStub: _FakeRocket_2(
              this,
              Invocation.getter(#rocket),
            ),
          )
          as _i2.Rocket);

  @override
  List<String> get ships =>
      (super.noSuchMethod(
            Invocation.getter(#ships),
            returnValue: <String>[],
            returnValueForMissingStub: <String>[],
          )
          as List<String>);

  @override
  _i2.Telemetry get telemetry =>
      (super.noSuchMethod(
            Invocation.getter(#telemetry),
            returnValue: _FakeTelemetry_3(this, Invocation.getter(#telemetry)),
            returnValueForMissingStub: _FakeTelemetry_3(
              this,
              Invocation.getter(#telemetry),
            ),
          )
          as _i2.Telemetry);

  @override
  _i2.LaunchSite get launchSite =>
      (super.noSuchMethod(
            Invocation.getter(#launchSite),
            returnValue: _FakeLaunchSite_4(
              this,
              Invocation.getter(#launchSite),
            ),
            returnValueForMissingStub: _FakeLaunchSite_4(
              this,
              Invocation.getter(#launchSite),
            ),
          )
          as _i2.LaunchSite);

  @override
  _i2.Links get links =>
      (super.noSuchMethod(
            Invocation.getter(#links),
            returnValue: _FakeLinks_5(this, Invocation.getter(#links)),
            returnValueForMissingStub: _FakeLinks_5(
              this,
              Invocation.getter(#links),
            ),
          )
          as _i2.Links);

  @override
  bool get upcoming =>
      (super.noSuchMethod(
            Invocation.getter(#upcoming),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i2.Timeline get timeline =>
      (super.noSuchMethod(
            Invocation.getter(#timeline),
            returnValue: _FakeTimeline_6(this, Invocation.getter(#timeline)),
            returnValueForMissingStub: _FakeTimeline_6(
              this,
              Invocation.getter(#timeline),
            ),
          )
          as _i2.Timeline);

  @override
  _i2.$LaunchItemCopyWith<_i2.LaunchItem> get copyWith =>
      (super.noSuchMethod(
            Invocation.getter(#copyWith),
            returnValue: _Fake$LaunchItemCopyWith_7<_i2.LaunchItem>(
              this,
              Invocation.getter(#copyWith),
            ),
            returnValueForMissingStub:
                _Fake$LaunchItemCopyWith_7<_i2.LaunchItem>(
                  this,
                  Invocation.getter(#copyWith),
                ),
          )
          as _i2.$LaunchItemCopyWith<_i2.LaunchItem>);

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [RocketItem].
///
/// See the documentation for Mockito's code generation for more information.
class MockRocketItem extends _i1.Mock implements _i3.RocketItem {
  @override
  _i3.$RocketItemCopyWith<_i3.RocketItem> get copyWith =>
      (super.noSuchMethod(
            Invocation.getter(#copyWith),
            returnValue: _Fake$RocketItemCopyWith_8<_i3.RocketItem>(
              this,
              Invocation.getter(#copyWith),
            ),
            returnValueForMissingStub:
                _Fake$RocketItemCopyWith_8<_i3.RocketItem>(
                  this,
                  Invocation.getter(#copyWith),
                ),
          )
          as _i3.$RocketItemCopyWith<_i3.RocketItem>);

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}
